# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: My_Agent

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Required variables
      $env:SYSTEM_ACCESSTOKEN
      $env:SYSTEM_TEAMFOUNDATIONSERVERURI 
      $env:SYSTEM_TEAMPROJECTID
      $env:SYSTEM_TEAMPROJECT 
      $groupName
      $workItemId
      
      # Derived variables
      $adoHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$env:SYSTEM_ACCESSTOKEN")) }
      $organization = ($env:SYSTEM_TEAMFOUNDATIONSERVERURI -split "/")[3]
      
      # Get recipients data based on ADO group name  
      $uriGetProjectDescriptor = ("https://vssps.dev.azure.com/{0}/_apis/graph/descriptors/{1}" -f $organization, $env:SYSTEM_TEAMPROJECTID)
      echo $uriGetProjectDescriptor
      $projectDescriptor = (Invoke-RestMethod -Uri $uriGetProjectDescriptor -Method GET -Headers $adoHeader).value
      
      $uriGetGroups = ("https://vssps.dev.azure.com/{0}/_apis/graph/groups?scopeDescriptor={1}" -f $organization, $projectDescriptor)
      echo  $uriGetGroups
      $group = (Invoke-RestMethod -Uri $uriGetGroups -Method GET -Headers $adoHeader).value | Where-Object { $_.displayname -eq $groupName }
      
      $uriGetMemberships = ("https://vssps.dev.azure.com/{0}/_apis/graph/Memberships/{1}?direction=Down" -f $organization, $group.descriptor)
      echo $uriGetMemberships
      $memberShipsList = Invoke-RestMethod -Uri $uriGetMemberships -Method GET -Headers $adoHeader
      
      $subjectDescriptors = $memberShipsList.value | Select-Object -Property memberDescriptor | Select-Object -ExpandProperty memberDescriptor
      echo $subjectDescriptors
      $uriGetMembers = ("https://vssps.dev.azure.com/{0}/_apis/identities?subjectDescriptors={1}&api-version=6.0" -f $organization, $($subjectDescriptors -join ","))
      $members = (Invoke-RestMethod -Uri $uriGetMembers -Method GET -Headers $adoHeader).value
      
      $emailAddresses = @()
      $tfIds = @()
      foreach ($member in $members) {
          $emailAddresses += $member.properties.Mail.'$value'
          $tfIds += $member.id
      }
      
      # Prepare email body
      $requestBody = @{ 
          message   = @{
              to      = @{
                  emailAddresses = $emailAddresses
                  tfIds          = $tfIds
              }
              cc      = @{}
              replyTo = @{}
              body    = "This is a test mail"
              subject = "[Azure DevOps] Test mail"
          }
          projectId = $env:SYSTEM_TEAMPROJECTID
          ids       = @($workItemId)
      }
      
      $arguments = @{
          Uri         = ("{0}{1}/_apis/wit/sendmail?api-version=7.0" -f $env:SYSTEM_TEAMFOUNDATIONSERVERURI, $env:SYSTEM_TEAMPROJECT)
          Method      = 'POST' 
          Headers     = $adoHeader 
          Body        = ConvertTo-Json -InputObject $requestBody -Depth 5
          ContentType = 'application/json; charset=utf-8'
      
      }
      
      # Send mail
      Invoke-RestMethod @arguments
      
